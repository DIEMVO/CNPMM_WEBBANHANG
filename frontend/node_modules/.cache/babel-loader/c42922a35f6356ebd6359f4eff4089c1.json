{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from \"../constants/productConstants\";\nimport axios from 'axios';\nimport Axios from \"axios\";\nimport { PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from './../constants/productConstants';\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete(\"/api/products/\" + productId, {\n      headers: {\n        A\n      }\n    });\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["D:/HOC/Nam4-KH1/CongNghePhanMemMoi/GitHub/CNPMM_WEBBANHANG/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","axios","Axios","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","listProducts","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","userSignin","userInfo","_id","post","headers","token","put","detailsProduct","productId","deleteProduct","PRODUCT_DELETE_REQUEST","delete","A","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL"],"mappings":"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","sourcesContent":["import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL,\r\n     PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from \"../constants/productConstants\"\r\nimport axios from 'axios'\r\nimport Axios from \"axios\";\r\nimport { PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from './../constants/productConstants';\r\nconst listProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({type: PRODUCT_LIST_REQUEST});\r\n        const {data} = await axios.get(\"/api/products\");\r\n        dispatch({type: PRODUCT_LIST_SUCCESS, payload: data})\r\n\r\n    }\r\n    catch(error){\r\n        dispatch({type: PRODUCT_LIST_FAIL, payload: error.message });\r\n    }\r\n    \r\n}\r\n\r\nconst saveProduct = (product) => async (dispatch, getState) =>{\r\n    try {\r\n        dispatch({type: PRODUCT_SAVE_REQUEST, payload: product});\r\n        const {userSignin:{userInfo}} = getState();\r\n        if (!product._id){\r\n            const {data} = await Axios.post('/api/products', product, {\r\n                headers:{\r\n                    'Authorization': 'Bearer ' + userInfo.token\r\n                }\r\n            });\r\n            dispatch({type: PRODUCT_SAVE_SUCCESS, payload: data});\r\n        }\r\n        else{\r\n            const {data} = await Axios.put('/api/products/' + product._id, product, {\r\n                headers:{\r\n                    'Authorization': 'Bearer ' + userInfo.token\r\n                }\r\n            });\r\n            dispatch({type: PRODUCT_SAVE_SUCCESS, payload: data});\r\n        }\r\n        \r\n        \r\n    \r\n    } catch (error) {\r\n        dispatch({type: PRODUCT_SAVE_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: PRODUCT_DETAILS_REQUEST, payload: productId});\r\n        const {data} = await axios.get(\"/api/products/\"+ productId);\r\n        dispatch({type: PRODUCT_DETAILS_SUCCESS, payload: data});\r\n    }\r\n    catch (error) {\r\n        dispatch({type:PRODUCT_DETAILS_FAIL, payload: error.message });\r\n    }\r\n}\r\nconst deleteProduct = (productId) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: PRODUCT_DELETE_REQUEST, payload: productId});\r\n        const {data} = await axios.delete(\"/api/products/\"+ productId, {\r\n            headers: {\r\n                A\r\n            }\r\n        });\r\n        dispatch({type: PRODUCT_DELETE_SUCCESS, payload: data});\r\n    }\r\n    catch (error) {\r\n        dispatch({type:PRODUCT_DELETE_FAIL, payload: error.message });\r\n    }\r\n}\r\n\r\n\r\nexport {listProducts, detailsProduct, saveProduct}"]},"metadata":{},"sourceType":"module"}